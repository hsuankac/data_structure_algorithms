deleteHeap(A[], heap_size):
	if(heap_size == 0)
		print "Heap enpty"
		return -1
	// get the content of the root into a variable
	item = A[1]
	// copy the content of the last element into the root
	A[1] = A[heap_size]
	// reduce the heap size by 1
	heap_size = heap_size - 1
	// call the adjust operation for restoring the heap at index = 1
	Adjust(A, 1, heap_size)
	Return item

Heapify(A[], n):
	for (i = n/2; i>=1; i = i - 1)
		Adjust(A, i ,n)


Adjust(A[], i, n)"
// The max heaps are well maintained at 2*i and 2*i +1, however, max heap
// is not maintained at index i, we need to perform the adjustment so that 
// max heap is maintained at index i
	j = 2 * i
	temp = A[i]
	while(j <= n):
		if(j < n and A[j] < A[j+1]):
			j = j + 1
		if(temp >= A[j])
			break loop
		A[j/2] = A[j]
		j = 2 * j
	// after while loop is over, we found a place for item
	A[j/2] = temp